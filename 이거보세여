import cv2
import threading
import matplotlib.pyplot as plt
from collections import deque
from ultralytics import YOLO

# 글로벌 모델 변수
model = None

def load_model():
    global model
    model = YOLO('yolov8n.pt')
    return model

def predict_video(video_path, results, idx):
    global model
    cap = cv2.VideoCapture(video_path)
    consecutive_detects = 0
    detections = deque(maxlen=10)

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        # 객체 감지 수행
        results = model(frame)
        detected = any(result.conf > 0.5 for result in results)  # 임계값 0.5로 설정
        
        detections.append(detected)
        
        if sum(detections) >= 10:
            consecutive_detects += 1
            detections.clear()  # 검출된 경우, 카운트 후 초기화

    results[idx] = consecutive_detects
    cap.release()

def main(video_paths):
    global model
    model = YOLO('C:/Users/hancom09/Downloads/CV_CCTV/yolov10_test/runs/detect/train7/weights/best.pt')

    num_videos = len(video_paths)
    results = [0] * num_videos
    threads = []

    for idx, video_path in enumerate(video_paths):
        thread = threading.Thread(target=predict_video, args=(video_path, results, idx))
        threads.append(thread)
        thread.start()

    for thread in threads:
        thread.join()

    return results

def plot_results(results, video_paths):
    for idx, (result, video_path) in enumerate(zip(results, video_paths)):
        plt.figure()
        plt.bar([0], [result], tick_label=[f'Video {idx + 1}'])
        plt.xlabel('Videos')
        plt.ylabel('Number of Detections')
        plt.title(f'Number of Detections of "잡상인" in Video {idx + 1}')
        plt.show()

if __name__ == '__main__':
    video_paths = [
        'C:/Users/hancom09/Downloads/CV_CCTV/CV_Project/test_data/video1.mp4',
        'C:/Users/hancom09/Downloads/CV_CCTV/CV_Project/test_data/video2.mp4',
        'C:/Users/hancom09/Downloads/CV_CCTV/CV_Project/test_data/video3.mp4'
    ]

    results = main(video_paths)
    plot_results(results, video_paths)



    # pip install opencv-python-headless matplotlib ultralytics











import streamlit as st
import datetime 
import pandas as pd
import altair as alt
import random
import time 
from threading import Thread
from ultralytics import YOLOv10
import cv2
from collections import deque

st.set_page_config(layout='wide', initial_sidebar_state='collapsed')

# YOLO 모델 로드
model_path = 'C:/Users/hancom09/Downloads/CV_CCTV/yolov10_test/runs/detect/train7/weights/best.pt'
model = YOLOv10(model_path)

# 시간 출력하기 위한 필요 변수 설정
def timezone():
    today = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    date_placeholder = st.empty()
    date_placeholder.subheader(today)

# 로그인 동작에 관련한 함수
def login():
    # 페이지 제목
    st.title("관리자 로그인")

    # 사용자 입력 받기
    username = st.text_input("관리자 번호")
    password = st.text_input("비밀번호", type="password")

    # 로그인 버튼
    login_button = st.button("로그인")

    # 로그인 검증
    if login_button:
        if username == "admin" and password == "1234":
            st.success(f"환영합니다 {username} 님!")
            st.session_state['logged_in'] = True
            st.experimental_rerun()
        else:
            st.error("로그인 실패! 관리자 번호와 비밀번호를 확인하세요.")

# 객체 감지 함수
def detect_objects(video_path):
    cap = cv2.VideoCapture(video_path)
    consecutive_detects = 0
    detections = deque(maxlen=10)

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        results = model(frame)
        detected = any(result.conf > 0.5 for result in results)  # 임계값 0.5로 설정

        detections.append(detected)

        if sum(detections) >= 10:
            consecutive_detects += 1
            detections.clear()  # 검출된 경우, 카운트 후 초기화

    cap.release()
    return consecutive_detects

# 영상 객체 인식 결과를 비동기로 처리하는 함수
def process_videos(video_paths):
    results = []
    threads = []
    for video_path in video_paths:
        result = []
        thread = Thread(target=lambda p, r: r.append(detect_objects(p)), args=(video_path, result))
        threads.append(thread)
        thread.start()
        results.append(result)

    for thread in threads:
        thread.join()

    return [result[0] for result in results]

# 로그인 후 출력되는 메인 페이지
def main_page():
    st.header('환영합니다. :red[admin] 님!', divider='rainbow')
    st.subheader('지하철 내에 :blue[이상행동] 탐지')
    video_path = 'C:/Users/hancom09/Downloads/CV_CCTV/CV_Project/test_data/assault_test_video.mp4'

    video_paths = [video_path, video_path, video_path]  # 임시로 동일한 비디오 사용

    col1, col2, col3 = st.columns([2, 2, 2])
    with col1:
        st.subheader('1번쨰 CCTV')
        st.video(video_paths[0], autoplay=True)

    with col2:
        st.subheader('2번쨰 CCTV')
        st.video(video_paths[1], autoplay=True)

    with col3:
        st.subheader('3번쨰 CCTV')
        st.video(video_paths[2], autoplay=True)

    if st.button('결과 보고'):
        st.session_state['show_response'] = True
        st.experimental_rerun()

# 영상 객체 인식 결과 출력하는 페이지
def response():
    timezone()
    st.header('필요한 영상 분석 결과 출력하는 위치')

    video_paths = [
        'C:/Users/hancom09/Downloads/CV_CCTV/CV_Project/test_data/assault_test_video.mp4',
        'C:/Users/hancom09/Downloads/CV_CCTV/CV_Project/test_data/assault_test_video.mp4',
        'C:/Users/hancom09/Downloads/CV_CCTV/CV_Project/test_data/assault_test_video.mp4'
    ]

    results = process_videos(video_paths)

    sec1, sec2, sec3 = st.columns([3, 3, 3])

    with sec1:
        st.write('1번 영상 결과')
        render_chart(results[0])

    with sec2:
        st.write('2번 영상 결과')
        render_chart(results[1])

    with sec3:
        st.write('3번 영상 결과')
        render_chart(results[2])

    if st.button('CCTV로 돌아가기'):
        st.session_state['show_response'] = False
        st.experimental_rerun()

# 데이터 시각화 함수
def render_chart(result):
    data = {'행동 유형': ['폭행', '실신', '기물파손', '절도', '이동상인', '몰카', '자전거 승차'], '횟수': random.sample(range(1, 8), 7)}
    df = pd.DataFrame(data)
    st.dataframe(df)
    chart = alt.Chart(df).mark_bar().encode(
        x=alt.X('행동 유형', axis=alt.Axis(labelAngle=0)),
        y='횟수'
    ).properties(width=400, height=300)
    st.altair_chart(chart, use_container_width=True)

# 메인 함수
def main():
    if 'logged_in' not in st.session_state:
        st.session_state['logged_in'] = False

    if st.session_state['logged_in']:
        if 'show_response' in st.session_state and st.session_state['show_response']:
            response()
        else:
            main_page()
    else:
        login()

if __name__ == "__main__":
    main()
